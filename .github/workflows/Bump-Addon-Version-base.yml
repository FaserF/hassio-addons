---
name: Automatically bump version on addon base updates and changelog

permissions:
  contents: write

on:
  push:
    branches:
      - master

jobs:
  version:
    runs-on: ubuntu-latest
    if: ${{ contains(github.event.head_commit.message, 'Update ghcr.io/hassio-addons/base-python') }} # Detect that the base addon has been updated
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          lfs: "true"
          fetch-depth: 0
      - name: "Retrieve version & increment it"
        id: version
        run: |
          set -e
          echo "Starting version increment process..."
          configFiles=$(find . -name 'config.yaml' -print0 | xargs -r0 echo)
          if [[ -z "$configFiles" ]]; then
              echo "Error: No config.yaml files found!"
              exit 0
          fi
          echo "Found config files: $configFiles"
          for configfile in $configFiles; do
              echo "--------------------------------------------"
              echo "Processing: $configfile"
              if [ ! -f "$configfile" ]; then
                  echo "‚ùå Error: $configfile not found!"
                  exit 1
              fi
              if [ ! -r "$configfile" ]; then
                  echo "‚ùå Error: $configfile is not readable! Trying to fix permissions..."
                  chmod +r "$configfile" || { echo "‚ùå Failed to fix permissions!"; exit 1; }
              fi
              sed -i 's/\r$//' "$configfile"  # Remove Windows line breaks (CRLF -> LF)
              OLD_VERSION=$(grep -E '^[[:space:]]*version:[[:space:]]+[0-9]+\.[0-9]+\.[0-9]+' "$configfile" | head -1 | awk '{print $2}')
              if [[ -z "$OLD_VERSION" ]]; then
                  echo "‚ùå Error: Could not extract a valid version from $configfile"
                  echo " File content:"
                  cat "$configfile"
                  exit 1
              fi
              echo " Extracted OLD_VERSION: '$OLD_VERSION'"
              if [[ ! "$OLD_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
                  echo "‚ùå Error: Version format in $configfile is invalid: '$OLD_VERSION'"
                  exit 1
              fi
              echo " Try recieving major minor patch number from '$OLD_VERSION'"
              IFS='.' read -r major minor patch <<< "$OLD_VERSION"
              if [[ -z "$major" || -z "$minor" || -z "$patch" ]]; then
                  echo "‚ùå Error: Failed to parse version components from '$OLD_VERSION'. Got: '$major' '$minor' '$patch'"
                  exit 1
              fi
              echo " Got '$major' '$minor' '$patch', increasing patch number now."
              if ! ((patch++)); then
                  echo "‚ùå Error: Patch version increment failed!"
                  exit 1
              fi
              NEW_VERSION="$major.$minor.$patch"
              echo " Updating $configfile from $OLD_VERSION to $NEW_VERSION"
              echo "SED command: sed -i.bak \"s/^version: $OLD_VERSION/version: $NEW_VERSION/\" \"$configfile\""
              sed -i.bak "s/^version: $OLD_VERSION/version: $NEW_VERSION/" "$configfile" || {
                  echo "‚ùå Error: Failed to update version in $configfile"
                  echo "OLD_VERSION: $OLD_VERSION"
                  echo "NEW_VERSION: $NEW_VERSION"
                  exit 1
              }
              NEW_VERSION_CHECK=$(grep -E '^[[:space:]]*version:[[:space:]]+[0-9]+\.[0-9]+\.[0-9]+' "$configfile" | head -1 | awk '{print $2}')
              if [[ "$NEW_VERSION_CHECK" != "$NEW_VERSION" ]]; then
                  echo "‚ùå Error: Version update failed in $configfile!"
                  echo " File content after attempt:"
                  cat "$configfile"
                  exit 1
              fi
              echo "‚úÖ Successfully updated $configfile to version $NEW_VERSION"
          done
          echo "üéâ Version increment process completed successfully!"
      - name: "Update Changelog"
        id: changelog
        run: |
          repo_url="https://api.github.com/repos/hassio-addons/addon-base"
          response=$(curl -s "$repo_url/releases")
          latest_version=$(echo "$response" | grep -oP '"tag_name": "\K[^"]+' | sed -n '1p')
          files=$(find . -name "CHANGELOG.md" -exec grep -l "# Changelog" {} \;)

          echo "Latest version from repo: $latest_version"
          echo "Found files: $files"

          echo "$files" | while IFS= read -r file; do
              if [ ! -w "$file" ]; then
                  echo "File $file is not writable"
                  exit 1
              fi

              current_version=$(grep -oP "^## \K\d+\.\d+\.\d+" "$file" | sort -rV | head -n1)
              echo "Processing $file, current version: $current_version"

              if [ -n "$current_version" ]; then
                  IFS='.' read -r major minor patch <<< "$current_version"
                  echo "Got major $major , minor $minor , patch $patch"
                  ((patch = patch + 1))
                  echo "Incremented Patch version to $((patch))"
                  new_version="$major.$minor.$((patch))"
                  echo "New version: $new_version"

                  sed -i "/# Changelog/a \\## $new_version\\n- automatically update addon-base to version $latest_version\\n" "$file"
                  sed_exit_code=$?

                  if [ $sed_exit_code -eq 0 ]; then
                      echo "Added changelog auto text for $file with new version $new_version and addon-base version $latest_version"
                  else
                      echo "Error $sed_exit_code while writing changelog auto text for $file with new version $new_version and addon-base version $latest_version"
                  fi
              else
                  echo "No valid version found in $file"
              fi
          done
      - name: Commit & Push
        uses: actions-js/push@v1.5
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: master
          force: true
          message: "Increment addon version due to addon base update"
